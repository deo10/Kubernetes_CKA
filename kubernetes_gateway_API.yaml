
# The GatewayClass object specifies the network infrastructure controller:
apiVersion: gateway.networking.k8s.io/v1
kind: GatewayClass
metadata:
  name: example-class
spec:
  controllerName: example.com/gateway-controller

#Next, define a Gateway that references the GatewayClass and sets up an HTTP
# listener on port 80:
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: example-gateway
spec:
  gatewayClassName: example-class
  listeners:
    - name: http
      protocol: HTTP
      port: 80

# Application developers then create an HTTPRoute to define routing rules.
# In the following example, requests for "www.example.com" with a path prefix
# of "/login" are directed to the "example-svc" backend on port 8080:
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: example-httproute
spec:
  parentRefs:
    - name: example-gateway
  hostnames:
    - "www.example.com"
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /login
      backendRefs:
        - name: example-svc
          port: 8080

# Another advantage of Gateway API is its clear
# and structured approach to TLS configuration.
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: secure-gateway
spec:
  gatewayClassName: example-gc
  listeners:
    - name: https
      port: 443
      protocol: HTTPS
      tls:
        mode: Terminate
        certificateRefs:
          - kind: Secret
            name: tls-secret
      allowedRoutes:
        kinds:
          - kind: HTTPRoute


# Traffic splitting is a common requirement for canary deployments.
# With Gateway API, traffic splitting is declared directly in the HTTPRoute,
# making it more transparent:
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: split-traffic
spec:
  parentRefs:
    - name: app-gateway
  rules:
    - backendRefs:
        - name: app-v1
          port: 80
          weight: 80
        - name: app-v2
          port: 80
          weight: 20

---
# To use the Gateway API, a controller is required.
# In this lab, we will install NGINX Gateway Fabric as the controller.
# Follow these steps to complete the installation:

# Install the Gateway API resources
# -> kubectl kustomize "https://github.com/nginx/nginx-gateway-fabric/config/crd/gateway-api/standard?ref=v1.5.1" | kubectl apply -f -

# Deploy the NGINX Gateway Fabric CRDs
# -> kubectl apply -f https://raw.githubusercontent.com/nginx/nginx-gateway-fabric/v1.6.1/deploy/crds.yaml

# Deploy NGINX Gateway Fabric
# -> kubectl apply -f https://raw.githubusercontent.com/nginx/nginx-gateway-fabric/v1.6.1/deploy/nodeport/deploy.yaml

# Verify the Deployment
# -> kubectl get pods -n nginx-gateway

# View the nginx-gateway service
# -> kubectl get svc -n nginx-gateway nginx-gateway -o yaml

#Update the nginx-gateway service to expose ports 30080 for HTTP and 30081 for HTTPS
# -> kubectl patch svc nginx-gateway -n nginx-gateway --type='json' -p='[
#  {"op": "replace", "path": "/spec/ports/0/nodePort", "value": 30080},
#  {"op": "replace", "path": "/spec/ports/1/nodePort", "value": 30081}
# ]'



# we have gateway controller + gateway + httpRoute
# we need to create HTTPRoute to connect it with pod and svc
# PathPrefix is used to match the path of the request
# svc - frontend-svc
# pod - frontend-pod
# gateway - nginx-gateway
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: frontend-route
spec:
  parentRefs:
    - name: nginx-gateway
      namespace: nginx-gateway
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: frontend-svc
          port: 80